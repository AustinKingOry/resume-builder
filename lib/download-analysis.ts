// import { CVAnalysisResult } from "@/hooks/use-cv-analysis";
import { CVAnalysisResult } from "@/hooks/use-supabase-cv-analysis";
import {
  AlignmentType,
  Document,
  Footer,
  Header,
  Media,
  PageNumber,
  Paragraph,
  TextRun,
  ImageRun,
} from "docx";
import { Buffer } from "node:buffer";

export async function generateFeedbackDocx(
  analysis: CVAnalysisResult,
  logoBase64: string,
  logoWidthPx: number,
  logoHeightPx?: number
) {
  // ----- HEADER -----
  const headerChildren: Paragraph[] = [];
  if (logoBase64) {
    // const imgBuffer = Buffer.from(logoBase64, "base64");
    const imgRun = new ImageRun({
      data: Buffer.from(logoBase64, "base64"),
      transformation: {
        width: logoWidthPx,
        height: logoHeightPx ?? Math.round((logoWidthPx * 40) / 120),
      },
      type: "png", // or "jpeg" depending on your logo file
    });
    headerChildren.push(
      new Paragraph({
        children: [imgRun],
        alignment: AlignmentType.LEFT,
      })
    );
  }

  // ----- BODY -----
  const bodyChildren: Paragraph[] = [];

  // Overall feedback
  bodyChildren.push(
    new Paragraph({
      text: "Overall Feedback",
      heading: "Heading1",
    }),
    new Paragraph(analysis.overall || "No overall feedback provided.")
  );

  // Detailed feedback items
  analysis.feedback.forEach((item) => {
    bodyChildren.push(
      new Paragraph({
        text: item.title,
        heading: "Heading2",
      }),
      new Paragraph(item.content),
      new Paragraph(`Category: ${item.category} | Severity: ${item.severity}`)
    );
    if (item.tip) {
      bodyChildren.push(new Paragraph(`Tip: ${item.tip}`));
    }
    if (item.kenyanContext) {
      bodyChildren.push(new Paragraph(`Kenyan Context: ${item.kenyanContext}`));
    }
  });

  // Market readiness
  bodyChildren.push(
    new Paragraph({
      text: "Market Readiness",
      heading: "Heading1",
    }),
    new Paragraph(`Score: ${analysis.marketReadiness.score}`),
    new Paragraph(`Strengths: ${analysis.marketReadiness.strengths.join(", ")}`),
    new Paragraph(`Priorities: ${analysis.marketReadiness.priorities.join(", ")}`)
  );

  // Kenyan Job Market Tips
  if (analysis.kenyanJobMarketTips.length) {
    bodyChildren.push(
      new Paragraph({
        text: "Kenyan Job Market Tips",
        heading: "Heading1",
      }),
      ...analysis.kenyanJobMarketTips.map((tip) => new Paragraph(tip))
    );
  }

  // Metadata
  bodyChildren.push(
    new Paragraph({
      text: "Document Metadata",
      heading: "Heading1",
    }),
    new Paragraph(`File Name: ${analysis.metadata.fileName}`),
    new Paragraph(`File Size: ${analysis.metadata.fileSize} bytes`),
    new Paragraph(`File Type: ${analysis.metadata.fileType}`),
    new Paragraph(`Word Count: ${analysis.metadata.wordCount}`),
    ...(analysis.metadata.pageCount
      ? [new Paragraph(`Page Count: ${analysis.metadata.pageCount}`)]
      : [])
  );

  // ----- FOOTER -----
  const footerChildren: Paragraph[] = [
    new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new TextRun({ text: "Kazikit â€¢ ", size: 20 }),
        new TextRun({ children: [PageNumber.CURRENT], size: 20 }),
        new TextRun({ text: " / ", size: 20 }),
        new TextRun({ children: [PageNumber.TOTAL_PAGES], size: 20 }),
      ],
    }),
  ];

  // ----- DOCUMENT -----
  const doc = new Document({
    creator: "Kazikit",
    title: `${analysis.metadata.fileName ?? "CV"} - Kazikit Feedback`,
    description: `Feedback generated by Kazikit for ${analysis.metadata.fileName ?? analysis.id}`,
    styles: {
      paragraphStyles: [
        {
          id: "Normal",
          name: "Normal",
          basedOn: "Normal",
          next: "Normal",
          run: { font: "Calibri", size: 22 }, // 11pt
        },
        {
          id: "Heading1",
          name: "Heading 1",
          basedOn: "Normal",
          next: "Normal",
          run: { font: "Calibri", size: 28, bold: true }, // 14pt
        },
        {
          id: "Heading2",
          name: "Heading 2",
          basedOn: "Normal",
          next: "Normal",
          run: { font: "Calibri", size: 24, bold: true }, // 12pt
        },
      ],
    },
    sections: [
      {
        headers: {
          default: new Header({ children: headerChildren }),
        },
        footers: {
          default: new Footer({ children: footerChildren }),
        },
        children: bodyChildren,
      },
    ],
  });

  return doc;
}
